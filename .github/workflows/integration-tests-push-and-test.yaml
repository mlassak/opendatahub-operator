name: Integration tests - push images and run tests
on:
  workflow_run:
    workflows: [ "Integration tests - build images" ]
    types:
      - completed
env:
  IMAGE_TAG_BASE: quay.io/${{ secrets.QUAY_ORG }}/opendatahub-operator
jobs:
  setup-catalog-and-run-tests:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download operator images artifact
        id: operator-images-artifact-download
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "operator-images"
            })[0];
            
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/operator_images.zip`, Buffer.from(download.data));

      - name: Unzip operator images artifact
        run: |
          unzip operator_images.zip

      - name: Podman load
        run: |
          podman load --input operator_images

      - name: Download tag vars artifact
        id: tag-vars-artifact-download
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "tag-vars"
            })[0];
            
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/tag_vars.zip`, Buffer.from(download.data));

      - name: Unzip tag variables artifact
        run: |
          unzip tag_vars.zip
      
      - name: Load tag variables
        run: |
          echo "VERSION_TAG=$(sed -n '1p' tag_vars.txt)" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Quay.io login
        uses: redhat-actions/podman-login@v1
        env:
          QUAY_ID: ${{ secrets.QUAY_ID }}
          QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
        with:
          registry: quay.io
          username: ${{ env.QUAY_ID }}
          password: ${{ env.QUAY_TOKEN }}

      - name: Push operator image
        env:
          IMG: ${{ env.IMAGE_TAG_BASE }}:${VERSION_TAG}
        run: |
          make image-push IMG=${{ env.IMG }}

      - name: Push bundle image
        env:
          VERSION: ${VERSION_TAG}
          IMG_TAG: ${VERSION_TAG}
        run: |
          make bundle-push VERSION=${{ env.VERSION }} IMG_TAG=${{ env.IMG_TAG }}

      - name: Build and push catalog image
        env:
          VERSION: ${VERSION_TAG}
          IMG_TAG: ${VERSION_TAG}
        run: |
          make catalog-build CATALOG_IMG=${{ env.CATALOG_IMG }} VERSION=${{ env.VERSION }} IMG_TAG=${{ env.IMG_TAG }}
          make catalog-push CATALOG_IMG=${{ env.CATALOG_IMG }} VERSION=${{ env.VERSION }} IMG_TAG=${{ env.IMG_TAG }}
          
